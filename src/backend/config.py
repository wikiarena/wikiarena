import os
from pydantic import BaseModel
MODEL_ALLOW_SET = {
    "qwen/qwen3-235b-a22b-thinking-2507",
    "z-ai/glm-4-32b",
    "qwen/qwen3-coder:free",
    "qwen/qwen3-coder",
    "google/gemini-2.5-flash-lite",
    "qwen/qwen3-235b-a22b-2507",
    "moonshotai/kimi-k2:free",
    "moonshotai/kimi-k2",
    "mistralai/devstral-medium",
    "mistralai/devstral-small",
    "x-ai/grok-4",
    "mistralai/mistral-small-3.2-24b-instruct:free",
    "mistralai/mistral-small-3.2-24b-instruct",
    "minimax/minimax-m1",
    "minimax/minimax-m1-80k",
    "google/gemini-2.5-flash-lite-preview-06-17",
    "google/gemini-2.5-flash",
    "google/gemini-2.5-pro",
    "openai/o3-pro",
    "x-ai/grok-3-mini",
    "x-ai/grok-3",
    "mistralai/magistral-small-2506",
    "mistralai/magistral-medium-2506:thinking",
    "mistralai/magistral-medium-2506",
    "google/gemini-2.5-pro-preview",
    "deepseek/deepseek-r1-0528",
    "anthropic/claude-opus-4",
    "anthropic/claude-sonnet-4",
    "mistralai/devstral-small-2505:free",
    "mistralai/devstral-small-2505",
    "openai/codex-mini",
    "mistralai/mistral-medium-3",
    "google/gemini-2.5-pro-preview-05-06",
    "arcee-ai/virtuoso-large",
    "qwen/qwen3-4b:free",
    "qwen/qwen3-30b-a3b",
    "qwen/qwen3-14b",
    "qwen/qwen3-32b",
    "qwen/qwen3-235b-a22b:free",
    "qwen/qwen3-235b-a22b",
    "openai/o4-mini-high",
    "openai/o3",
    "openai/o4-mini",
    "openai/gpt-4.1",
    "openai/gpt-4.1-mini",
    "openai/gpt-4.1-nano",
    "x-ai/grok-3-mini-beta",
    "x-ai/grok-3-beta",
    "meta-llama/llama-4-maverick",
    "meta-llama/llama-4-scout",
    "mistral/ministral-8b",
    "google/gemini-2.5-pro-exp-03-25",
    "deepseek/deepseek-chat-v3-0324:free",
    "deepseek/deepseek-chat-v3-0324",
    "mistralai/mistral-small-3.1-24b-instruct:free",
    "mistralai/mistral-small-3.1-24b-instruct",
    "ai21/jamba-1.6-large",
    "ai21/jamba-1.6-mini",
    "google/gemini-2.0-flash-lite-001",
    "anthropic/claude-3.7-sonnet",
    "anthropic/claude-3.7-sonnet:thinking",
    "anthropic/claude-3.7-sonnet:beta",
    "mistralai/mistral-saba",
    "openai/o3-mini-high",
    "google/gemini-2.0-flash-001",
    "qwen/qwen-turbo",
    "qwen/qwen-plus",
    "qwen/qwen-max",
    "openai/o3-mini",
    "mistralai/mistral-small-24b-instruct-2501",
    "deepseek/deepseek-r1-distill-llama-70b",
    "deepseek/deepseek-r1",
    "mistralai/codestral-2501",
    "deepseek/deepseek-chat",
    # "openai/o1",
    # "x-ai/grok-2-1212",
    "google/gemini-2.0-flash-exp:free",
    "meta-llama/llama-3.3-70b-instruct:free",
    "meta-llama/llama-3.3-70b-instruct",
    "amazon/nova-lite-v1",
    "amazon/nova-micro-v1",
    "amazon/nova-pro-v1",
    "openai/gpt-4o-2024-11-20",
    "mistralai/mistral-large-2411",
    "mistralai/mistral-large-2407",
    "mistralai/pixtral-large-2411",
    "thedrummer/unslopnemo-12b",
    "anthropic/claude-3.5-haiku:beta",
    "anthropic/claude-3.5-haiku",
    "anthropic/claude-3.5-haiku-20241022:beta",
    "anthropic/claude-3.5-haiku-20241022",
    "anthropic/claude-3.5-sonnet:beta",
    "anthropic/claude-3.5-sonnet",
    "mistralai/ministral-3b",
    "mistralai/ministral-8b",
    "nvidia/llama-3.1-nemotron-70b-instruct",
    "google/gemini-flash-1.5-8b",
    "thedrummer/rocinante-12b",
    "meta-llama/llama-3.2-3b-instruct",
    "meta-llama/llama-3.2-11b-vision-instruct",
    "qwen/qwen-2.5-72b-instruct",
    "mistralai/pixtral-12b",
    "cohere/command-r-08-2024",
    "cohere/command-r-plus-08-2024",
    "microsoft/phi-3.5-mini-128k-instruct",
    "nousresearch/hermes-3-llama-3.1-70b",
    "openai/gpt-4o-2024-08-06",
    "meta-llama/llama-3.1-8b-instruct",
    "meta-llama/llama-3.1-70b-instruct",
    "meta-llama/llama-3.1-405b-instruct",
    "mistralai/mistral-nemo",
    "openai/gpt-4o-mini-2024-07-18",
    "openai/gpt-4o-mini",
    "anthropic/claude-3.5-sonnet-20240620:beta",
    "anthropic/claude-3.5-sonnet-20240620",
    # "mistralai/mistral-7b-instruct:free",
    "mistralai/mistral-7b-instruct-v0.3",
    "mistralai/mistral-7b-instruct",
    "microsoft/phi-3-mini-128k-instruct",
    "microsoft/phi-3-medium-128k-instruct",
    "google/gemini-flash-1.5",
    "openai/gpt-4o",
    # "openai/gpt-4o-2024-05-13",
    # "openai/gpt-4o:extended",
    "meta-llama/llama-3-8b-instruct",
    "meta-llama/llama-3-70b-instruct",
    "mistralai/mixtral-8x22b-instruct",
    # "google/gemini-pro-1.5",
    # "openai/gpt-4-turbo",
    "cohere/command-r-plus",
    "cohere/command-r-plus-04-2024",
    "cohere/command-r",
    "anthropic/claude-3-haiku:beta",
    "anthropic/claude-3-haiku",
    # "anthropic/claude-3-opus:beta",
    # "anthropic/claude-3-opus",
    "anthropic/claude-3-sonnet",
    "cohere/command-r-03-2024",
    "mistralai/mistral-large",
    "openai/gpt-3.5-turbo-0613",
    "openai/gpt-4-turbo-preview",
    "mistralai/mistral-small",
    "mistralai/mistral-tiny",
    "mistralai/mixtral-8x7b-instruct",
    "openai/gpt-4-1106-preview",
    "mistralai/mistral-7b-instruct-v0.1",
    # "openai/gpt-3.5-turbo-16k",
    # "openai/gpt-3.5-turbo",
    # "openai/gpt-4",
    # "openai/gpt-4-0314",
}

MODEL_ALLOW_SET.add("wikiarena/random")

class BackendConfig(BaseModel):
    """Configuration for the FastAPI backend."""
    
    # Server settings
    host: str = "0.0.0.0"
    port: int = 8000
    debug: bool = False
    
    # CORS settings
    cors_origins: list = ["http://localhost:3000", "http://localhost:5173"]  # React dev servers
    
    # Game settings
    default_max_steps: int = 30
    max_concurrent_games: int = 10
    
    # MCP server settings - reuse from existing config
    mcp_server_name: str = "stdio_mcp_server"
    
    @classmethod
    def from_env(cls) -> "BackendConfig":
        """Create config from environment variables."""
        return cls(
            host=os.getenv("BACKEND_HOST", "0.0.0.0"),
            port=int(os.getenv("BACKEND_PORT", "8000")),
            debug=os.getenv("BACKEND_DEBUG", "false").lower() == "true",
            cors_origins=os.getenv("CORS_ORIGINS", "http://localhost:3000,http://localhost:5173").split(","),
            default_max_steps=int(os.getenv("DEFAULT_MAX_STEPS", "30")),
            max_concurrent_games=int(os.getenv("MAX_CONCURRENT_GAMES", "10"))
        )

# Global config instance
config = BackendConfig.from_env()
